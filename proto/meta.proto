// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "error.proto";

package dingodb.pb.meta;

option java_package = "io.dingodb.meta";
option cc_generic_services = true;

message GetSchemasRequest {
  uint64 schema_id = 1;
}

message GetSchemasResponse {
  dingodb.pb.error.Error error = 1;
  repeated dingodb.pb.common.Schema schemas = 2;
}

message TableDefinitionWithId {
  uint64 table_id = 1;
  dingodb.pb.common.TableDefinition table_definition = 2;
}

message GetTablesRequest {
  uint64 schema_id = 1;
}

message GetTablesResponse {
  dingodb.pb.error.Error error = 1;
  repeated TableDefinitionWithId table_definition_with_ids = 2;
}

message GetTableRequest {
  uint64 table_id = 1;
}

message GetTableResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Table table = 2;
}

message CreateTableRequest {
  uint64 schema_id = 1;
  dingodb.pb.common.TableDefinition table_definition = 2;
}

message CreateTableResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Table table = 2;
}

message CreateSchemaRequest {
  uint64 parent_schema_id = 1;
  string schema_name = 2;
}

message CreateSchemaResponse {
  dingodb.pb.error.Error error = 1;
  dingodb.pb.common.Schema schema = 2;
}

message DropTableRequest {
  uint64 schema_id = 1;
  uint64 table_id = 2;
}

message DropTableResponse {
  dingodb.pb.error.Error error = 1;
}

service MetaService {
  // GetSchema
  // in: schema_id
  // out: List<Schema>
  rpc GetSchemas(GetSchemasRequest) returns (GetSchemasResponse);

  // GetTables
  // in: schema_id
  // out: List<TableDefinitionWithId>
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);

  // GetTable
  // in: table_id
  // out: Table
  rpc GetTable(GetTableRequest) returns (GetTableResponse);

  // CreateTable
  // in: schema_id TableDefinition
  // out: Table
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);

  // DropTable
  // in: schema_id table_id
  // out: {}
  rpc DropTable(DropTableRequest) returns (DropTableResponse);

  // CreateSchema
  // in: parent_schema_id schema_name
  // out: Schema
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);

  // TODO
  // Operation about User, such as create/drop/grant.

  // Operation about Metrics
}
