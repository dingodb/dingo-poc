// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

import "common.proto";

package dingodb.pb.meta;

option java_package = "io.dingodb.meta";
option cc_generic_services = true;

message CreateTableReq {
  string                          tableName                = 1;
  dingodb.pb.common.TableDefinition  tableDefinition          = 2;
}

message CreateTableRes {
  dingodb.pb.common.CommonId    id             = 1;
}

message DropTableReq {
  dingodb.pb.common.CommonId    id             = 1;
}

message DropTableRes {
}

message GetTableDefReq {
  repeated dingodb.pb.common.CommonId    ids             = 1;
}

message GetTableDefRes {
  repeated  dingodb.pb.common.CommonId ids                                = 1;
  repeated  dingodb.pb.common.TableDefinition table_defs           = 2;
}

message GetTableRegionReq {
  dingodb.pb.common.CommonId    id             = 1;
}

message GetTableRegionRes {
  repeated  dingodb.pb.common.RegionInfo regions = 1;
}


message MetricStat {
  double  disk_used_percent     = 1;
  double  mem_used_percent      = 2;
  double  cpu_used_percent      = 3;
  double  disk_io_percent       = 4;
}

message InstanceInfo {
  dingodb.pb.common.Location          address = 1;
  MetricStat                       stat    = 3;
}

message StoreHeartbeatReq {
  InstanceInfo instanceInfo                         = 1;
  repeated dingodb.pb.common.RegionInfo    regionInfo  = 2;
}

message StoreHeartbeatRes {
}

message AllocateStoreIdReq {
  dingodb.pb.common.Location          address = 1;
  string                       resourceTag = 2;
  int64                          startTime = 3;
}

message AllocateStoreIdRes {
  string storeId           = 1;
}

message GetSchemaReq {
  dingodb.pb.common.CommonId schema_id = 1;
}

message GetSchemaRes {
  repeated dingodb.pb.common.Schema schemas  = 1;
}

message GetTablesReq {
  repeated dingodb.pb.common.CommonId  table_id =  1;
}

message GetTablesRes {
  repeated dingodb.pb.common.TableDefinition tables  = 1;
}

message GetTablePartitionsReq {
  dingodb.pb.common.CommonId table_id = 1;
}

message GetTablePartitionsRes {
  repeated dingodb.pb.common.TablePartition table_partitions = 1;
}

message GetRegionsReq {
  dingodb.pb.common.CommonId table_id = 1;
}

message GetRegionsRes {
  dingodb.pb.common.TableRegions table_regions = 1;
}

service MetaService {
  // query schema/table/partition/regions
  rpc listSchemas(GetSchemaReq) returns (GetSchemaRes);
  rpc listTables(GetTablesReq) returns (GetTablesRes);
  rpc listPartitions(GetTablePartitionsReq) returns (GetTablePartitionsRes);
  rpc listRegions(GetRegionsReq) returns (GetRegionsRes);

  // Table Operation
  rpc createTable(CreateTableReq) returns (CreateTableRes);
  rpc dropTable(DropTableReq) returns (DropTableRes);

  // todo
  // Operation about User, such as create/drop/grant.

  // Schema, CreateSchema/DropSchema/ getAllTableFromSchema / getSubSchema

  // Operation about Metrics
}


service Store4Serivce {
  // rpc AllocateId4Store(StoreIdAllocReq) returns (StoreIdAllocRes);
  rpc HeartbeatFromStore(StoreHeartbeatReq) returns (StoreHeartbeatRes);
}