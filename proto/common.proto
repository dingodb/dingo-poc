// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package dingodb.pb.common;

option java_package = "io.dingodb.common";
option cc_generic_services = true;

enum Engine {
    ENG_ROCKSDB                       = 0;
    ENG_MEMORY                        = 1;
    ENG_XDP                           = 2;
    ENG_CLICKHOUSE                    = 3;
};

message Location {
  string ip      = 1;
  int32  port    = 2;
}

message Schema {
    string name     = 1;
}


message Range {
  bytes start_key               = 1;
  bytes end_key                 = 2;
}

message KeyValue {
  bytes key                     = 1;
  bytes value                   = 2;
}


enum RegionStatus {
    REGION_STATUS_NONE = 0;
    REGION_STATUS_IDLE = 1;
    REGION_STATUS_DOING = 2;
}

message RegionInfo {
    uint64 region_id                            = 1;
    uint64 region_epoch                         = 2;
    uint64 table_id                             = 3;
    string table_name                           = 4;
    uint64 partition_id                         = 5;
    uint32 replica_num                          = 6;
    Range  range                                = 7;

    repeated string peers                       = 10;
    string leader                               = 11;

    RegionStatus status                         = 20;

    uint32 create_time                          = 30;
};

enum IdType {
    ID_TYPE_SCHEMA            = 0;
    ID_TYPE_TABLE             = 1;
    ID_TYPE_INDEX             = 2;
}

message CommonId {
  IdType type        = 1;
  uint64 value       = 2;
}

/**
 * Define types about SQL.
*/
enum SqlType {
  SQL_TYPE_BOOLEAN              = 0;
  SQL_TYPE_INTEGER              = 1;
  SQL_TYPE_BIGINT               = 2;
  SQL_TYPE_DOUBLE               = 3;
  SQL_TYPE_FLOAT                = 4;
  SQL_TYPE_DATE                 = 5;
  SQL_TYPE_TIME                 = 6;
  SQL_TYPE_TIMESTAMP            = 7;
  SQL_TYPE_VARCHAR              = 8;
  SQL_TYPE_ARRAY                = 9;
  SQL_TYPE_MULTISET             = 10;
  SQL_TYPE_ANY                  = 11;
}

/**
* Define ElementType about Composite Structure.
*/
enum ElementType {
    ELEM_TYPE_DOUBLE              = 0;
    ELEM_TYPE_FLOAT               = 1;
    ELEM_TYPE_INT32               = 2;
    ELEM_TYPE_INT64               = 3;
    ELEM_TYPE_UINT32              = 4;
    ELEM_TYPE_UINT64              = 5;
    ELEM_TYPE_BOOLEAN             = 6;
    ELEM_TYPE_STRING              = 7;
    ELEM_TYPE_BYTES               = 8;
    ELEM_TYPE_FIX32               = 9;
    ELEM_TYPE_FIX64               = 10;
    ELEM_TYPE_SFIX32              = 11;
    ELEM_TYPE_SFIX64              = 12;
}

/**
* Column Definition.
*/
message ColumnDefinition {
  string                    name                   = 1;
  SqlType                   sql_type               = 2;
  ElementType               element_type           = 3;
  int32                     precision              = 4;
  int32                     scale                  = 5;
  bool                      nullable               = 6;
  int32                     indexOfKey             = 7;
  bool                      has_default_val        = 8;
  string                    default_val            = 9;
}


/**
* Information about Index.
*/
message Index {
  repeated string index_column             = 1;
  bool            is_unique                = 2;
}

/**
 * compute partition by columns and operand function.
*/
enum PartitionStrategy {
  PT_STRATEGY_RANGE = 0;
  PT_STRATEGY_HASH  = 1;
}

message PartitionRange {
  repeated string range = 1;
}

message TablePartition {
  repeated string           partition_column                    = 1;
  PartitionStrategy         partition_strategy                  = 2;
  PartitionRange            partition_range                     = 3;
}

message TableRegions {
    CommonId partition_id                = 1;
    repeated RegionInfo regions          = 2;
}

message TableDefinition {
    CommonId                               id                     = 1;
    string                                 name                   = 2;
    repeated ColumnDefinition              columns                = 3;
    map<string, Index>                     indexes                = 4;
    uint32                                 version                = 5;
    uint64                                 ttl                    = 6;
    TablePartition                         table_partition        = 7;
    Engine                                 engine                 = 8;
    map<string, string>                    properties             = 9;
}
