// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

import "common.proto";

package dingodb.pb.store;

option java_package = "io.dingodb.store";
option cc_generic_services = true;

enum RegionStatus {
  NONE = 0;
  IDLE = 1;
  DOING = 2;
}

message RegionInfo {
  uint64 region_id                            = 1;
  uint64 region_epoch                         = 2;
  uint64 table_id                             = 3;
  string table_name                           = 4;
  uint64 partition_id                         = 5;
  uint32 replica_num                          = 6;
  dingodb.pb.common.Range range               = 7;

  repeated string peers                       = 10;
  string leader                               = 11;

  RegionStatus status                         = 20;

  uint32 create_time                          = 30;
};

message AddRegionRequest {
  RegionInfo region_info        = 1;
}

message AddRegionResponse {
}

message DestroyRegionRequest {
  uint64 region_id               = 1;
}

message DestroyRegionResponse {
}

message KvGetRequest {
  uint64 region_id                = 1;
  bytes key                       = 2;
}

message KvGetResponse {
  bytes value                     = 2;
}

message KvPutRequest {
  uint64 region_id                = 1;
  bytes key                       = 2;
  bytes value                     = 3;
}

message KvPutResponse {
}

message KvPutIfAbsentRequest {
  uint64 region_id                                       = 1;
  repeated dingodb.pb.common.KeyValue kvs                = 2;
}

message PutResult {
  bytes key                       = 1;
  bool is_successed               = 2;
}

message KvPutIfAbsentResponse {
  repeated PutResult results      = 1;
}

service StoreService {
  // region
  rpc AddRegion(AddRegionRequest) returns(AddRegionResponse);
  rpc DestroyRegion(DestroyRegionRequest) returns(DestroyRegionResponse);

  // kv
  rpc KvGet(KvGetRequest) returns(KvGetResponse);
  rpc KvPut(KvPutRequest) returns(KvPutResponse);
  rpc KvPutIfAbsent(KvPutIfAbsentRequest) returns(KvPutIfAbsentResponse);
};
