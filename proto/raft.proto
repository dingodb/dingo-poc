// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
import "meta.proto";
import "coordinator.proto";
import "coordinator_internal.proto";

package dingodb.pb.raft;

option java_package = "io.dingodb.raft";
option cc_generic_services = true;

enum CmdType {
  NONE = 0;
  PUT = 1;
  PUTIFABSENT = 2;
  DELETERANGE = 3;

  // Coordinator State Machine Operator
  META_CREATE_SCHEMA = 2000;
  META_CREATE_TABLE = 2001;
  META_CMD = 2002;
}

message PutRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message PutResponse {}

message PutIfAbsentRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.KeyValue kvs = 2;
}

message PutIfAbsentResponse {
  repeated bytes put_keys = 1;
}

message DeleteRangeRequest {
  string cf_name = 1;
  repeated dingodb.pb.common.Range ranges = 2;
}

message DeleteRangeResponse {}

message RaftCreateSchemaRequest {}
message RaftCreateSchemaResponse {}

message RaftCreateTableRequest {}
message RaftCreateTableResponse {}

message RaftMetaRequest {
  repeated dingodb.pb.coordinator_internal.CoordinatorInternal coordinators = 1;
  repeated dingodb.pb.common.Store stores = 2;
  repeated dingodb.pb.common.Region regions = 3;
  repeated dingodb.pb.meta.Schema schemas = 4;
  repeated dingodb.pb.coordinator_internal.TableInternal tables = 5;

  uint64 coordinator_map_epoch = 6;
  uint64 store_map_epoch = 7;
  uint64 region_map_epoch = 8;
  uint64 schema_map_epoch = 9;
  uint64 table_map_epoch = 10;

  uint64 next_coordinator_id_ = 11;
  uint64 next_store_id_ = 12;
  uint64 next_region_id_ = 13;
  uint64 next_schema_id_ = 14;
  uint64 next_table_id_ = 15;
}

message Request {
  CmdType cmd_type = 1;
  oneof cmd_body {
    // Store Operation[1000, 2000]
    PutRequest put = 1000;
    PutIfAbsentRequest put_if_absent = 1001;
    DeleteRangeRequest delete_range = 1002;

    // Coordinator Operation[2000, 3000]
    RaftCreateSchemaRequest create_schema_req = 2001;
    RaftCreateTableRequest create_table_req = 2002;
    RaftMetaRequest meta_req = 2003;
  }
}

message Response {
  CmdType cmd_type = 1;
}

message RequestHeader {
  uint64 region_id = 1;
}

message RaftCmdRequest {
  RequestHeader header = 1;
  repeated Request requests = 2;
}

message ResponseHeader {}

message RaftCmdResponse {
  ResponseHeader header = 1;
  repeated Response responses = 2;
}
